import telebot
from json import loads
from requests import get
from geopy import geocoders
from datetime import datetime

bot_token = "5235692840:AAHhiz-8BDRZ8M2jhRXGm9EjrDPlHbJdD3I"
api_token = "d6ce56f813906539ba50501c309a47d6"  # key
user_city = "–ú–æ—Å–∫–≤–∞"  # initial city
user_city_coords = ('55.7504461', '37.6174943')

bot = telebot.TeleBot(bot_token)


def city_coords(city: str):  # returns coordinates of input city in format (latitude, longitude)
    geolocator = geocoders.Nominatim(user_agent="telebot")
    latitude = str(geolocator.geocode(city).latitude)
    longitude = str(geolocator.geocode(city).longitude)
    return latitude, longitude


def get_weather(latitude, longitude, token: str):  # receives latitude and longitude of the city and returns forecast
    url = f"https://api.openweathermap.org/data/2.5/onecall?lat={latitude}&lon={longitude}&exclude=minutely,hourly,alerts&units=metric&lang=ru&appid={token}"   # line
    request = get(url)   # need an answer
    data = loads(request.text)
    forecast = dict()
    forecast['current'] = dict()
    forecast['daily'] = dict()  # dict in the dict in the massive in the dict
    params = ['dt', 'temp', 'pressure', 'humidity', 'clouds', 'uvi']
    for param in params:
        forecast['current'][param] = data['current'][param]
    forecast['current']['weather'] = data['current']['weather'][0]['description']
    for param in params:
        forecast['daily'][param] = data['daily'][1][param]  # 0 - is today's forecast, 1 - is tomorrow's forecast
    forecast['daily']['weather'] = data['daily'][1]['weather'][0]['description']
    forecast['timezone_offset'] = data['timezone_offset']
    return forecast


@bot.message_handler(commands=['start'])
def start(message):  # greeting message
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = telebot.types.KeyboardButton("–ü—Ä–∏–≤–µ—Ç üëã")
    markup.add(button)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –Ω–∞–π–¥—É –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞!"
                     .format(message.from_user), reply_markup=markup)


@bot.message_handler(commands=['city'])
def city(message):  # button "/city" function
    send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    bot.register_next_step_handler(send, set_city)


def set_city(message):  # input city
    global user_city, user_city_coords
    text = message.text.title()
    text = text.replace("-", " ")
    if not text.replace(" ", '').isalpha():
        send = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü—É."
                                                 "–í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
        bot.register_next_step_handler(send, set_city)
        return
    try:
        user_city = text
        user_city_coords = city_coords(user_city)
        bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {0}".format(user_city))
    except AttributeError:  
        user_city = "–ú–æ—Å–∫–≤–∞"
        user_city_coords = ('55.7504461', '37.6174943')
        bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥. –î–∞–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...")
        bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ú–æ—Å–∫–≤–∞")


@bot.message_handler(commands=['weather'])
def send_weather(message):  # button "/weather" function
    global user_city, user_city_coords, api_token 
    lat, lon = user_city_coords
    forecast = get_weather(lat, lon, api_token)  # tuple 
    current_time = int(forecast['current']['dt']) + int(forecast['timezone_offset'])
    tomorrow_time = int(forecast['daily']['dt']) + int(forecast['timezone_offset'])
    current_time = datetime.utcfromtimestamp(current_time).strftime('%d.%m.%Y %H:%M')
    tomorrow_time = datetime.utcfromtimestamp(tomorrow_time).strftime('%d.%m.%Y')
    forecast['current']['pressure'] = str(int(forecast['current']['pressure']) * 0.75)
    forecast['daily']['pressure'] = str(int(forecast['daily']['pressure']) * 0.75)
    forecast['current']['weather'] = forecast['current']['weather'].capitalize()
    forecast['daily']['weather'] = forecast['daily']['weather'].capitalize()
    bot.send_message(message.chat.id, f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {user_city}:\n\n"
                                      f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({lat}; {lon})\n\n"
                                      f"–ú–µ—Å—Ç–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}\n"
                                      f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['current']['temp']} ¬∞C\n"
                                      f"–î–∞–≤–ª–µ–Ω–∏–µ: {forecast['current']['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                                      f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast['current']['humidity']}%\n"
                                      f"–£–§-–∏–Ω–¥–µ–∫—Å: {forecast['current']['uvi']}\n"
                                      f"{forecast['current']['weather']}\n\n"
                                      f"–ó–∞–≤—Ç—Ä–∞({tomorrow_time}) –æ–∂–∏–¥–∞–µ—Ç—Å—è:\n"
                                      f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temp']['min']} ¬∞C\n"
                                      f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temp']['max']} ¬∞C\n"
                                      f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temp']['morn']} ¬∞C\n"
                                      f"–î–Ω–µ–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temp']['day']} ¬∞C\n"
                                      f"–í–µ—á–µ—Ä–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temp']['eve']} ¬∞C\n"
                                      f"–ù–æ—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['daily']['temp']['night']} ¬∞C\n"
                                      f"–î–∞–≤–ª–µ–Ω–∏–µ: {forecast['daily']['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                                      f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast['daily']['humidity']}%\n"
                                      f"–£–§-–∏–Ω–¥–µ–∫—Å: {forecast['daily']['uvi']}\n"
                                      f"{forecast['daily']['weather']}")


@bot.message_handler(commands=['check'])
def check_city(message):  # button "/check" function
    global user_city
    bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {user_city}")


@bot.message_handler(content_types=['text'])
def default_reply(message):  # keyboard's interface
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = telebot.types.KeyboardButton("/city")
    button2 = telebot.types.KeyboardButton("/weather")
    button3 = telebot.types.KeyboardButton("/check")
    markup.add(button1, button2, button3)
    bot.send_message(message.chat.id,
                     f"–í–≤–µ–¥–∏—Ç–µ: \n"
                     f"/city, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥\n"
                     f"/weather, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ (–≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ú–æ—Å–∫–≤–∞)\n"
                     f"/check, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω",
                     reply_markup=markup)


bot.polling(non_stop=True)  # non-stop mode
